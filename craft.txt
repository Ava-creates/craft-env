
def solve(env, visualise=False) -> float:
  """Runs the environment with a craft function that returns list of actions to takr and returns total reward."""
  item = 14 
  total_reward = craft(env, item)
  return total_reward 

@funsearch.run
def evaluate() -> float:
  """Evaluates a crafting policy on a sample task."""
  visualise = False
  recipes_path = "resources/recipes.yaml"
  hints_path = "resources/hints.yaml"

  env_sampler = env_factory.EnvironmentFactory(
      recipes_path, hints_path, max_steps=100, reuse_environments=False,
      visualise=visualise)

  env = env_sampler.sample_environment(task_name='make[stick]')
  return solve(env, visualise=visualise)

@funsearch.evolve
def craft(env, item) -> float:
  """Takes necessary steps in the enviornment to complete the task of crafting the input item and then returns the reward it collects from the enviornment when it takes the necessary steps"""
  return 0.0