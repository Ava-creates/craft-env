"""
You are an expert in solving tasks some simulation environments using programmatic strategies. You will be given the details on the simulation environment (in the form of its code base), a domain-specific language (DSL) that is designed to solve the task in a compositional way, and you will be asked to come up with the implementation of specific functions in the DSL to using the provided code base. You are safe to assume that other than the function we ask you to implement, the rest of the constructs in the DSL are already implemented properly. 
## Code base for the game
The code base contains the following information:
- Classes: Each class includes informations about data attributes, class constructors and functions. We also provide information about the inputs to the constructors, and inputs, outputs and type signatures of the functions. 
- Functions: These are functions that do not belong to any class. We provide the input, output and the type signatures of the functions.
- Full classes for some important classes 

class Struct:
    def __init__(self, **entries):
        rec_entries = {}
        for k, v in entries.items():
            if isinstance(v, dict):
                rv = Struct(**v)
            elif isinstance(v, list):
                rv = []
                for item in v:
                    if isinstance(item, dict):
                        rv.append(Struct(**item))
                    else:
                        rv.append(item)
            else:
                rv = v
            rec_entries[k] = rv
        self.__dict__.update(rec_entries)

    def __str_helper(self, depth):
        lines = []
        for k, v in self.__dict__.items():
            if isinstance(v, Struct):
                v_str = v.__str_helper(depth + 1)
                lines.append("%s:\n%s" % (k, v_str))
            else:
                lines.append("%s: %r" % (k, v))
        indented_lines = ["    " * depth + l for l in lines]
        return "\n".join(indented_lines)

    def __str__(self):
        return "struct {\n%s\n}" % self.__str_helper(1)

    def __repr__(self):
        return "Struct(%r)" % self.__dict__

class Index:
    def __init__(self):
        self.contents = dict()
        self.ordered_contents = []
        self.reverse_contents = dict()

    def __getitem__(self, item):
        if item not in self.contents:
            return None
        return self.contents[item]

    def index(self, item):
        if item not in self.contents:
            idx = len(self.contents) + 1
            self.ordered_contents.append(item)
            self.contents[item] = idx
            self.reverse_contents[idx] = item
        idx = self[item]
        assert idx != 0
        return idx

    def get(self, idx):
        if idx == 0:
            return "*invalid*"
        return self.reverse_contents[idx]

    def __len__(self):
        return len(self.contents) + 1

    def __iter__(self):
        return iter(self.ordered_contents)

    def __str__(self):
        return "Index: " + str(self.contents)

def flatten(lol):
    if isinstance(lol, tuple) or isinstance(lol, list):
        return sum([flatten(l) for l in lol], [])
    else:
        return [lol]

def postorder(tree):
    if isinstance(tree, tuple):
        for subtree in tree[1:]:
            for node in postorder(subtree):
                yield node
        yield tree[0]
    else:
        yield tree

def tree_map(function, tree):
    if isinstance(tree, tuple):
        head = function(tree)
        tail = tuple(tree_map(function, subtree) for subtree in tree[1:])
        return (head,) + tail
    return function(tree)

def tree_zip(*trees):
    if isinstance(trees[0], tuple):
        zipped_children = [[t[i] for t in trees] for i in range(len(trees[0]))]
        zipped_children_rec = [tree_zip(*z) for z in zipped_children]
        return tuple(zipped_children_rec)
    return trees

FEXP_RE = re.compile(r"(.*)\[(.*)\]")
def parse_fexp(fexp):
    m = FEXP_RE.match(fexp)
    return (m.group(1), m.group(2))

class Cookbook(object):
  '''Holds the components of a world, and rules on how to create stuff.'''

  def __init__(self, recipes_path):
    with open(recipes_path) as recipes_f:
      recipes = yaml.load(recipes_f, Loader=yaml.FullLoader)
    self.index = Index()
    self.environment = set(self.index.index(e) for e in recipes["environment"])
    self.primitives = set(self.index.index(p) for p in recipes["primitives"])
    self.recipes = {}
    for output, inputs in recipes["recipes"].items():
      d = {}
      for inp, count in inputs.items():
        # special keys
        if "_" in inp:
          d[inp] = count
        else:
          d[self.index.index(inp)] = count
      self.recipes[self.index.index(output)] = d
    self.kinds = self.environment | self.primitives | set(self.recipes.keys())
    self.n_kinds = len(self.index)
    # print("cookbook index", self.index)

  def primitives_for(self, goal):
    out = {}

    if goal not in self.recipes:
      return out

    def insert(kind, count):
      assert kind in self.primitives
      if kind not in out:
        out[kind] = count
      else:
        out[kind] += count

    for ingredient, count in self.recipes[goal].items():
      if not isinstance(ingredient, int):
        assert ingredient[0] == "_"
        continue
      elif ingredient in self.primitives:
        insert(ingredient, count)
      else:
        sub_recipe = self.recipes[ingredient]
        n_produce = sub_recipe["_yield"] if "_yield" in sub_recipe else 1
        n_needed = int(np.ceil(1. * count / n_produce))
        expanded = self.primitives_for(ingredient)
        for k, v in expanded.items():
          insert(k, v * n_needed)

    return out

'''Craft environment logic'''

from cookbook import Cookbook
from misc import array

import curses
import logging
import numpy as np
from skimage.measure import block_reduce
import time

WIDTH = 12
HEIGHT = 12

WINDOW_WIDTH = 5
WINDOW_HEIGHT = 5

N_WORKSHOPS = 3

DOWN = 0
UP = 1
LEFT = 2
RIGHT = 3
USE = 4
N_ACTIONS = USE + 1


def random_free(grid, random):
  pos = None
  while pos is None:
    (x, y) = (random.randint(WIDTH), random.randint(HEIGHT))
    if grid[x, y, :].any():
      continue
    pos = (x, y)
  return pos


def neighbors(pos, dir=None):
  x, y = pos
  neighbors = []
  if x > 0 and (dir is None or dir == LEFT):
    neighbors.append((x - 1, y))
  if y > 0 and (dir is None or dir == DOWN):
    neighbors.append((x, y - 1))
  if x < WIDTH - 1 and (dir is None or dir == RIGHT):
    neighbors.append((x + 1, y))
  if y < HEIGHT - 1 and (dir is None or dir == UP):
    neighbors.append((x, y + 1))
  return neighbors


class CraftWorld(object):
  def __init__(self, recipes_path, seed=0):
    self.cookbook = Cookbook(recipes_path)
    self.n_features = \
        2 * WINDOW_WIDTH * WINDOW_HEIGHT * self.cookbook.n_kinds + \
        self.cookbook.n_kinds + \
        4 + \
        1
    self.n_actions = N_ACTIONS

    self.non_grabbable_indices = self.cookbook.environment
    self.grabbable_indices = [
        i for i in range(self.cookbook.n_kinds)
        if i not in self.non_grabbable_indices
    ]
    self.workshop_indices = [
        self.cookbook.index["workshop%d" % i] for i in range(N_WORKSHOPS)
    ]
    self.water_index = self.cookbook.index["water"]
    self.stone_index = self.cookbook.index["stone"]

    self.random = np.random.RandomState(seed)

  def sample_scenario_with_goal(self, goal):
    assert goal not in self.cookbook.environment
    # print(goal, "in the scenarion")
    ingredients = self.cookbook.primitives_for(goal)
    make_island = (goal == self.cookbook.index["gold"] or
                   self.cookbook.index["gold"] in ingredients)
    make_cave = (goal == self.cookbook.index["gem"] or
                 self.cookbook.index["gem"] in ingredients)

    if (goal not in self.cookbook.primitives and goal not in self.cookbook.recipes):
      raise ValueError("Don't know how to build a scenario for %s" % goal)

    return self.sample_scenario_simple(make_island=make_island, make_cave=make_cave)

  def sample_scenario(self, make_island=False, make_cave=False):
    # generate grid
    # print(self.cookbook.n_kinds)
    grid = np.zeros((WIDTH, HEIGHT, self.cookbook.n_kinds))
    i_bd = self.cookbook.index["boundary"]
    grid[0, :, i_bd] = 1
    grid[WIDTH - 1:, :, i_bd] = 1
    grid[:, 0, i_bd] = 1
    grid[:, HEIGHT - 1:, i_bd] = 1

    # treasure
    if make_island or make_cave:
      (gx, gy) = (1 + self.random.randint(WIDTH - 2), 1)
      treasure_index = \
          self.cookbook.index["gold"] if make_island else self.cookbook.index["gem"]
      wall_index = \
          self.water_index if make_island else self.stone_index
      grid[gx, gy, treasure_index] = 1
      for i in range(-1, 2):
        for j in range(-1, 2):
          if not grid[gx + i, gy + j, :].any():
            grid[gx + i, gy + j, wall_index] = 1

    # ingredients
    for primitive in self.cookbook.primitives:
      if (primitive == self.cookbook.index["gold"] or
              primitive == self.cookbook.index["gem"]):
        continue
      for i in range(4):
        (x, y) = random_free(grid, self.random)
        grid[x, y, primitive] = 1

    # generate crafting stations
    for i_ws in range(N_WORKSHOPS):
      ws_x, ws_y = random_free(grid, self.random)
      grid[ws_x, ws_y, self.cookbook.index["workshop%d" % i_ws]] = 1

    # generate init pos
    init_pos = random_free(grid, self.random)

    return CraftScenario(grid, init_pos, self)

  def sample_scenario_simple(self, make_island=False, make_cave=False):
        # Create empty grid
        grid = np.zeros((WIDTH, HEIGHT, self.cookbook.n_kinds))
        
        # Add boundary
        i_bd = self.cookbook.index["boundary"]
        grid[0, :, i_bd] = 1
        grid[WIDTH - 1:, :, i_bd] = 1
        grid[:, 0, i_bd] = 1
        grid[:, HEIGHT - 1:, i_bd] = 1
        
        # Place agent at (5,5)
        init_pos = (5, 5)
        
        # Place wood at (5,6) - right next to agent
        wood_index = self.cookbook.index["wood"]
        grid[5, 6, wood_index] = 1
        
        # Place workshop1 at (5,7) - right next to wood
        workshop1_index = self.cookbook.index["workshop1"]
        grid[5, 7, workshop1_index] = 1
        
        return CraftScenario(grid, init_pos, self)

  def visualize(self, transitions):
    def _visualize(win):
      curses.start_color()
      for i in range(1, 8):
        curses.init_pair(i, i, curses.COLOR_BLACK)
        curses.init_pair(i + 10, curses.COLOR_BLACK, i)
      states = [transitions[0].s1] + [t.s2 for t in transitions]
      mstates = [transitions[0].m1] + [t.m2 for t in transitions]
      for state, mstate in zip(states, mstates):
        win.clear()
        for y in range(HEIGHT):
          for x in range(WIDTH):
            if not (state.grid[x, y, :].any() or
                    (x, y) == state.pos):
              continue
            thing = state.grid[x, y, :].argmax()
            if (x, y) == state.pos:
              if state.dir == LEFT:
                ch1 = "<"
                ch2 = "@"
              elif state.dir == RIGHT:
                ch1 = "@"
                ch2 = ">"
              elif state.dir == UP:
                ch1 = "^"
                ch2 = "@"
              elif state.dir == DOWN:
                ch1 = "@"
                ch2 = "v"
              color = curses.color_pair(mstate.arg or 0)
            elif thing == self.cookbook.index["boundary"]:
              ch1 = ch2 = curses.ACS_BOARD
              color = curses.color_pair(10 + thing)
            else:
              name = self.cookbook.index.get(thing)
              ch1 = name[0]
              ch2 = name[-1]
              color = curses.color_pair(10 + thing)

            win.addch(HEIGHT - y, x * 2, ch1, color)
            win.addch(HEIGHT - y, x * 2 + 1, ch2, color)
        win.refresh()
        time.sleep(1)

    curses.wrapper(_visualize)


class CraftScenario(object):
  def __init__(self, grid, init_pos, world):
    self.init_grid = grid
    self.init_pos = init_pos
    self.init_dir = 0
    self.world = world

  def init(self):
    inventory = np.zeros(self.world.cookbook.n_kinds)
    state = CraftState(self, self.init_grid, self.init_pos, self.init_dir,
                       inventory)
    return state


class CraftState(object):
  def __init__(self, scenario, grid, pos, dir, inventory):
    self.scenario = scenario
    self.world = scenario.world
    self.grid = grid
    self.inventory = inventory
    self.pos = pos
    self.dir = dir
    self._cached_features_dict = None
    self._cached_features = None

  def satisfies(self, goal_name, goal_arg):
    return self.inventory[goal_arg] > 0

  def features(self):
    if self._cached_features is None:
      features_dict = self.features_dict()
      features = np.concatenate((features_dict['features_ego'].ravel(),
                                 features_dict['features_ego_large'].ravel(),
                                 features_dict['inventory'],
                                 features_dict['direction'],
                                 [0]))
      assert len(features) == self.world.n_features
      self._cached_features = features.astype(np.float32)
    return self._cached_features

  def features_dict(self):
    if self._cached_features_dict is None:
      x, y = self.pos

      # Egocentric view, one-hot of features
      hw = int(WINDOW_WIDTH / 2)
      hh = int(WINDOW_HEIGHT / 2)
      grid_feats = array.pad_slice(self.grid, (x - hw, x + hw + 1),
                                   (y - hh, y + hh + 1))

      # Larger egocentric view, downsampled
      bhw = int((WINDOW_WIDTH * WINDOW_WIDTH) / 2)
      bhh = int((WINDOW_HEIGHT * WINDOW_HEIGHT) / 2)
      grid_feats_big = array.pad_slice(self.grid, (x - bhw, x + bhw + 1),
                                       (y - bhh, y + bhh + 1))
      grid_feats_big_downsampled = block_reduce(
          grid_feats_big, (WINDOW_WIDTH, WINDOW_HEIGHT, 1), func=np.max)

      # Position
      pos_feats = np.asarray(self.pos)
      pos_feats[0] /= WIDTH
      pos_feats[1] /= HEIGHT

      # Direction
      dir_features = np.zeros(4)
      dir_features[self.dir] = 1

      features_dict = {
          'features_ego': grid_feats,
          'features_ego_large': grid_feats_big_downsampled,
          'features_global': self.grid.copy(),  # Global allocentric view
          'pos': pos_feats,
          'direction': dir_features,
          'inventory': self.inventory.copy()
      }
      # print("$$$$", self.inventory, "$$$")
      self._cached_features_dict = features_dict

    return self._cached_features_dict

  def step(self, action):
    x, y = self.pos
    n_dir = self.dir
    n_inventory = self.inventory
    n_grid = self.grid

    reward = 0.0
    # print(x, y)
    # move actions
    if action == DOWN:
      dx, dy = (0, -1)
      # print("in down action")
      n_dir = DOWN
    elif action == UP:
      # print("in up action")
      dx, dy = (0, 1)
      n_dir = UP
    elif action == LEFT:
      dx, dy = (-1, 0)
      n_dir = LEFT
    elif action == RIGHT:
      dx, dy = (1, 0)
      n_dir = RIGHT

    # use actions
    elif action == USE:
      cookbook = self.world.cookbook
      dx, dy = (0, 0)
      success = False
      for nx, ny in neighbors(self.pos, self.dir):
        here = self.grid[nx, ny, :]
        if not self.grid[nx, ny, :].any():
          continue

        if here.sum() > 1:
          print("impossible world configuration:")
          logging.error(here.sum())
          logging.error(self.grid.sum(axis=2))
          logging.error(self.grid.sum(axis=0).sum(axis=0))
          logging.error(cookbook.index.contents)
        assert here.sum() == 1
        thing = here.argmax()

        if not(thing in self.world.grabbable_indices or
               thing in self.world.workshop_indices or
               thing == self.world.water_index or
               thing == self.world.stone_index):
          continue

        n_inventory = self.inventory.copy()
        n_grid = self.grid.copy()

        if thing in self.world.grabbable_indices:
          n_inventory[thing] += 1
          n_grid[nx, ny, thing] = 0
          success = True

        elif thing in self.world.workshop_indices:
          # TODO not with strings
          workshop = cookbook.index.get(thing)
          for output, inputs in cookbook.recipes.items():
            if inputs["_at"] != workshop:
              continue
            yld = inputs["_yield"] if "_yield" in inputs else 1
            ing = [i for i in inputs if isinstance(i, int)]
            if any(n_inventory[i] < inputs[i] for i in ing):
              continue
            n_inventory[output] += yld
            for i in ing:
              n_inventory[i] -= inputs[i]
            success = True

        elif thing == self.world.water_index:
          if n_inventory[cookbook.index["bridge"]] > 0:
            n_grid[nx, ny, self.world.water_index] = 0
            n_inventory[cookbook.index["bridge"]] -= 1

        elif thing == self.world.stone_index:
          if n_inventory[cookbook.index["axe"]] > 0:
            n_grid[nx, ny, self.world.stone_index] = 0

        break

    # other
    else:
      raise Exception("Unexpected action: %s" % action)

    n_x = x + dx
    n_y = y + dy
    if self.grid[n_x, n_y, :].any():
      n_x, n_y = x, y

    new_state = CraftState(self.scenario, n_grid, (n_x, n_y), n_dir,
                           n_inventory)
    return reward, new_state

  def next_to(self, i_kind):
    x, y = self.pos
    return self.grid[x - 1:x + 2, y - 1:y + 2, i_kind].any()

'''DMLab-like wrapper for a Craft environment.'''

from __future__ import division
from __future__ import print_function

import collections
import curses
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
import seaborn as sns
import time

Task = collections.namedtuple("Task", ["goal", "steps"])

class CraftLab(object):
  '''DMLab-like wrapper for a Craft state.'''

  def __init__(self,
               scenario,
               task_name,
               task,
               max_steps=100,
               visualise=False,
               render_scale=10,
               extra_pickup_penalty=0.3):
    '''DMLab-like interface for a Craft environment.

    Given a `scenario` (basically holding an initial world state), will provide
    the usual DMLab API for use in RL.
    '''
    self.world = scenario.world
    self.scenario = scenario
    self.task_name = task_name
    self.task = task
    self.max_steps = max_steps
    self._visualise = visualise
    self.steps = 0
    self._extra_pickup_penalty = extra_pickup_penalty
    self._current_state = self.scenario.init()
    self._picked_up_counts = {}  # Track how many of each item we've picked up
    self._last_inventory = None  # Track last inventory state to detect pickups

    # Rendering options
    self._render_state = {}
    self._width, self._height, _ = self._current_state.grid.shape
    self._render_scale = render_scale
    self._inventory_bar_height = 10
    self._goal_bar_height = 30
    self._render_width = self._width * self._render_scale
    self._render_height = (self._height * self._render_scale +
                           self._goal_bar_height + self._inventory_bar_height)
    # Colors of entities for rendering
    self._colors = {...}
  def obs_specs(self):
    obs_specs = collections.OrderedDict()
    obs_specs['features'] = {
        'dtype': 'float32',
        'shape': (self.world.n_features, )
    }
    obs_specs['task_name'] = {'dtype': 'string', 'shape': tuple()}

    if self._visualise:
      obs_specs['image'] = {
          'dtype': 'float32',
          'shape': (self._render_height, self._render_width, 3)
      }
    return obs_specs

  def action_specs(self):
    # last action is termination of current option, we don't use it.
    return {
        'DOWN': 0,
        'UP': 1,
        'LEFT': 2,
        'RIGHT': 3,
        'USE': 4,
        # 'TERMINATE': 5
    }

  def reset(self, seed=0):
    '''Reset the environment.

    Agent will loop in the same world, from the same starting position.
    '''
    del seed
    self._current_state = self.scenario.init()
    self.steps = 0
    self._picked_up_counts = {}  # Reset picked up counts
    self._last_inventory = np.zeros_like(self._current_state.inventory)  # Initialize last inventory
    return self.observations()

  def observations(self):
    '''Return observation dict.'''
    obs = {
        'features': self._current_state.features().astype(np.float32),
        'features_dict': self._current_state.features_dict(),
        'task_name': self.task_name
    }
    if self._visualise:
      obs['image'] = self.render_frame().astype(np.float32)
    return obs

  def step(self, action, num_steps=1):
    '''Step the environment, getting reward, done and observation.'''
    assert num_steps == 1, "No action repeat in this environment"

    # Step environment
    # (state_reward is 0 for all existing Craft environments)
    state_reward, self._current_state = self._current_state.step(action)
    self.steps += 1

    done = self._is_done()
    reward = np.float32(self._get_reward() + state_reward)

    if done:
      self.reset()
    observations = self.observations()
    return reward, done, observations

  def _is_done(self):
    goal_name, goal_arg = self.task.goal
    # print(goal_name, goal_arg)
    if(self.steps >= self.max_steps):
      print("ran out of steps")
    done = (self._current_state.satisfies(goal_name, goal_arg)
            or self.steps >= self.max_steps)
    return done
    
  def _get_reward(self):
    goal_name, goal_arg = self.task.goal

    # Get all items needed in the recipe for the goal
    needed_items = self.world.cookbook.primitives_for(goal_arg)
    
    # Calculate reward based on new pickups of needed items
    reward = 0.0
    
    # Check for new pickups by comparing current inventory with last inventory
    if self._last_inventory is not None:
      for item, needed_count in needed_items.items():
        # If we have more of this item than before, it was just picked up
        if self._current_state.inventory[item] > self._last_inventory[item]:
          reward += 0.5  # Give reward for picking up a needed item
          
      # Check for goal item pickup
      if self._current_state.inventory[goal_arg] > self._last_inventory[goal_arg]:
        reward = 1.0  # Give full reward for picking up goal item
    
    # Update last inventory for next step
    self._last_inventory = self._current_state.inventory.copy()
      
    # Penalize picking up items not needed for the recipe
    items_index = np.arange(self._current_state.inventory.size)
    # Create mask for items that aren't needed (not in needed_items and not the goal)
    not_needed_mask = np.ones_like(items_index, dtype=bool)
    for item in needed_items:
      not_needed_mask[item] = False
    not_needed_mask[goal_arg] = False
    
    # Only penalize items that aren't needed for the recipe
    reward -= self._extra_pickup_penalty * np.sum(
        self._current_state.inventory[not_needed_mask])
    reward = np.maximum(reward, 0)
    return reward

'''
## DSL
The following language is the domain-specific language that we designed to solve **any** task in this game. 

s ::= task SEMI s | task SEMI
task ::= move | craft | ifhas do
move ::= MOVE_FUNC LPAR dir RPAR
dir ::= UP | DOWN | LEFT | RIGHT
craft ::= CRAFT_FUNC LPAR item RPAR
collect ::= COLLECT_FUNC LPAR kind RPAR
item ::= PLANK | STICK | CLOTH | ROPE | BRIDGE | BUNDLE | HAMMER | KNIFE | BED | AXE | SHEARS | LADDER | SLINGSHOT | ARROW | BOW | BENCH | FLAG | GOLDARROW
ifhas ::= if HAS LPAR item RPAR
kind ::= BOUNDARY | WATER | STONE | WORKSHOP0 | WORKSHOP1 | WORKSHOP2 | WOOD | IRON | GRASS | ROCK | GOLD | GEM
do ::= then task
'''

You need to generate an implementation of the `CRAFT_FUNC` function using the CraftLab class provided above.
"""

import numpy as np
import time

import env_factory

def craft_func_v1(env, item_index) -> list[int]:
  """Returns a list of actions that we will take to craft the item at the item_index. Crafting an item requires collecting the primitives/items needed and then going to one of the workshops to craft the item."""
  return []

def craft_func_v2(env, item_index) -> list[int]: