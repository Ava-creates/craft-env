The Craft environment is a 2D world inspired by Minecraft, where an agent must complete hierarchical tasks with sparse rewards. The environment is represented by a 12Ã—12 grid containing:
Environment Elements
boundary: impassable edge


water: can be crossed only by building a bridge


stone: can be removed only using an axe


workshop0, workshop1, workshop2: specialized crafting areas


Primitive (Grabbable) Resources
wood


iron


grass


rock


gold


gem


Crafting System
Crafting occurs at specific workshops using the USE action. The following recipes are available:
plank:
  wood: 1
  _at: workshop0

stick:
  wood: 1
  _at: workshop1

cloth:
  grass: 1
  _at: workshop2

rope:
  grass: 1
  _at: workshop0

bridge:
  wood: 1
  iron: 1
  _at: workshop2

bundle:
  wood: 1
  grass: 1
  _at: workshop1

hammer:
  wood: 1
  rock: 1
  _at: workshop0

knife:
  iron: 1
  rock: 1
  _at: workshop2

bed:
  plank: 1
  grass: 1
  _at: workshop1

axe:
  stick: 1
  iron: 1
  _at: workshop0

shears:
  stick: 1
  iron: 1
  _at: workshop1

ladder:
  plank: 1
  stick: 1
  _at: workshop2

slingshot:
  rope: 1
  wood: 1
  rock: 1
  _at: workshop1

arrow:
  knife: 1
  wood: 1
  _at: workshop0

bow:
  rope: 1
  bundle: 1
  _at: workshop2

bench:
  hammer: 1
  wood: 1
  iron: 1
  _at: workshop2

flag:
  stick: 1
  cloth: 1
  iron: 1
  _at: workshop0

goldarrow:
  gold: 1
  wood: 1
  _at: workshop0
Implemented Agent Actions
Movement
The agent can move in four cardinal directions:
UP, DOWN, LEFT, RIGHT


Movement is blocked if the destination cell is occupied.

USE Action
Allows the agent to interact with the environment in the direction it is facing:
Collects grabbable primitives (e.g., wood, rock)


Given the above specification, generate a new version of the CFG in BNF format. The new grammar should be complete, heirarichal,and composable.
Only output the grammar in BNF format, no extra explanations.

You can base your improvements on this old version of the grammar as it can not complete some tasks in the craft enviornment feasibly like make[bench], get[gold], or make[goldenarrow].

CFG_version1:
s ::= task SEMI s | task SEMI
task ::= move | craft | ifhas do
move ::= MOVE_FUNC LPAR dir RPAR
dir ::= UP | DOWN | LEFT | RIGHT
craft ::= CRAFT_FUNC LPAR item RPAR
item ::= PLANK | STICK | CLOTH | ROPE | BRIDGE | BUNDLE | HAMMER | KNIFE | BED | AXE | SHEARS | LADDER | SLINGSHOT | ARROW | BOW | BENCH | FLAG | GOLDARROW
ifhas ::= if HAS LPAR item RPAR
kind ::= BOUNDARY | WATER | STONE | WORKSHOP0 | WORKSHOP1 | WORKSHOP2 | WOOD | IRON | GRASS | ROCK | GOLD | GEM
do ::= then task

CFG_version2: